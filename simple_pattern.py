#!/usr/bin/python3
# encoding: UTF-8
"""
 this file contains all regex rules used for matching
 author:xxx
 date: 2019.10.24
"""

import re
import collections
from utils import *

pattern_dict = {
    "deconstruct": "~" + var_name + left_brackets + sp + right_brackets,
    "pointer": type_key + sp + "\*" + var_name,
    "memory_address": "&" + var_name,
    "func": "::",
    "array": array1d_key,
    "multiarray": arraynd_key,
    "datamember": cls_name + "." + member_name,
    "pass_value_call": var_name + left_brackets + var_name + repeat_varORarray_key + right_brackets,
    "variable_declaration1": var_declar + repeat_varORarray_key + '(\s*=\s*' + or_def + title_def + ')',
    "variable_declaration2": "extern" + sp + var_declar + repeat_varORarray_key + title_def,
    "object_def": cls_name + sp + cls_name + repeat_varORarray_key+ title_def,
    "function_declaration": var_declar + left_brackets + varORarray_declar + repeat_varORarray_declar + right_brackets,
    "base_class": "class" + sp + cls_name + sp + colon + sp + acemodi_key + sp + cls_name,
    "string_char": "char" + sp + member_name + left_square + num_key + right_square,
    "variable_definitions": type_key + sp + member_name + left_brackets_comma + sp + member_name + right_brackets_star,
    "function_definitions": type_key + sp + member_name + left_brackets + type_key + sp + member_name + left_brackets_comma + sp + type_key + sp + member_name + right_brackets_star + right_brackets,
    "return_type": var_declar + left_brackets + var_name + repeat_varORarray_key + right_brackets,
    "return_type1": var_declar + left_brackets + var_name + repeat_varORarray_key + right_brackets,
    "array_as_parameters1": type_key + sp + member_name + left_brackets + var_declar + repeat_varORarray_declar + right_brackets,
    "array_as_parameters2": type_key + sp + member_name + left_brackets + array_declar + repeat_varORarray_declar + right_brackets,
    "datamember": cls_name + "." + member_name,
    "pointer_variable_declaration": type_key + sp + "\*" + var_name,
    "pointer_array": "\*" + var_name + left_square + var_name + right_square,
    "reference_statement": type_key + "&" + sp + var_name,
    "pointer_to_structure": "struct" + sp + var_name + sp + "\*" + var_name,
    "string": "string" + sp + "\*" + var_name + sp + "=" + sp + "(\"|\').*(\"|\')",
    "derived_class": "class" + sp + cls_name + sp + colon + sp + acemodi_key + sp + cls_name,
    "pure_virtual_function": "virtual" + sp + var_declar + left_brackets + sp + right_brackets,
    "hexadecimal": "(0x)|(0X)[a-fA-F0-9]*",
    "octal": "0[0-7]*",
    "decimal": "[1-9]" + num_key,
    "float_number": num_ch + num_ch + "*." + num_ch + num_key,
    "float_e": num_ch + num_ch + "*." + num_ch + num_ch + "*e",
    "float_E": num_ch + num_ch + "*." + num_ch + num_ch + "*E",
    'pattern_str': "(\"|\')[a-zA-Z0-9_]*\s*(,|\.|;|!|@|#|\$|%|\^|&|\*|-|\+|`|\[|\]|\{|\}|:|<|>|\?)*\s*[a-zA-Z0-9_]*(,|\.|;|!|@|#|\$|%|\^|&|\*|-|\+|`|\[|\]|\{|\}|:|<|>|\?)*\s*(\"|\')",
    'miscellaneous_operator_choose': "[a-zA-Z0-9_]*\s*(\+|-|\*|/|=|<|>)*\s*[a-zA-Z0-9_]*\s*(\+|-|\*|/|=|<|>)*\s*[a-zA-Z0-9_]*\s*\?\s*[a-zA-Z0-9_]*\s*(\+|-|\*|/)*\s*[a-zA-Z0-9_]*\s*:\s*[a-zA-Z0-9_]*(\+|-|\*|/)*[a-zA-Z0-9_]*",
    'miscellaneous_operator_comma': "[a-zA-Z0-9_]*\s*(\+|-|\*|/|=|<|>)*\s*[a-zA-Z0-9_]*\s*(\+|-|\*|/|=|<|>)*\s*[a-zA-Z0-9_]*\s*\?\s*[a-zA-Z0-9_]*\s*(\+|-|\*|/)*\s*[a-zA-Z0-9_]*\s*:\s*[a-zA-Z0-9_]*(\+|-|\*|/)*[a-zA-Z0-9_]*",
    # 'miscellaneous_operator_comma': "\([a-zA-Z0-9_]*\s*(\+|-|\*|\\|=|<|>|)*\s*[a-zA-Z0-9_]*\s*,(\s*[a-zA-Z0-9_]*\s*(\+|-|\*|\\|=|<|>|)*\s*[a-zA-Z0-9_]*)*\s*,\s*[a-zA-Z0-9_]*\s*(\+|-|\*|\\|=|<|>|)*\s*[a-zA-Z0-9_]*\s*\)",
    "miscellaneous_data_type_cast": left_brackets + type_key + right_brackets,
    "do_while": "\s\s*do\s" + sp,
    "if_else": "else" + sp,
    "formal_parameter": var_declar + left_brackets + var_declar + repeat_varORarray_declar + right_brackets,
    "actual_parameter1": var_name + left_brackets + var_name + repeat_varORarray_key + right_brackets,
    "actual_parameter2": var_name + sp + left_brackets + type_key + sp + "\*" + var_name + sp + left_brackets_comma + sp + type_key + sp + "\*" + var_name + right_brackets_star + right_brackets,
    "pointer_call": var_name + sp + left_brackets + type_key + sp + "\*" + var_name + sp + left_brackets_comma + sp + type_key + sp + "\*" + var_name + right_brackets_star + right_brackets,
    "reference_call": var_name + sp + left_brackets + type_key + sp + "&" + var_name + sp + left_brackets_comma + sp + type_key + sp + "&" + var_name + right_brackets_star + right_brackets,
    "cos1": "cos" + left_brackets + var_declar + right_brackets,
    "cos2": "cos" + left_brackets + var_name + right_brackets,
    "sin1": "sin" + left_brackets + var_declar + right_brackets,
    "sin2": "sin" + left_brackets + var_name + right_brackets,
    "tan1": "tan" + left_brackets + var_declar + right_brackets,
    "tan2": "tan" + left_brackets + var_name + right_brackets,
    "log1": "log" + left_brackets + var_name + right_brackets,
    "log2": "log10" + left_brackets + var_name + right_brackets,
    'pow':  "pow\((([0-9][0-9]*\.[0-9]*)|([0-9][0-9]*)|([a-zA-Z_][a-zA-Z0-9_]*)),\s*(([0-9]*)|([a-zA-Z_][a-zA-Z0-9_]*))\)",
    "sqrt1": "sqrt" + left_brackets + var_declar + right_brackets,
    "sqrt2": "sqrt" + left_brackets + var_name + right_brackets,
    "array_declaration": var_declar + left_square + num_ch + num_key + right_square + title_def,
    "initialize_array": var_name + left_square + sp + right_square + sp + "=",
    "null_pointer": "\*" + var_name + sp + "=" + sp + "NULL",
    "pointer_to_pointer": "\*\*" + var_name,
    "pass_pointer_to_function": var_declar + left_brackets + type_key + sp + "\*" + var_name + right_brackets,
    "return_pointer_from_function": type_key + sp + "\*" + sp + var_name + left_brackets + sp + right_brackets,
    "public_inheritance": "class" + sp + cls_name + sp + colon + sp + "public" + sp + cls_name,
    "protected_inheritance": "class" + sp + cls_name + sp + colon + sp + "protected" + sp + cls_name,
    "private_inheritance": "class" + sp + cls_name + sp + colon + sp + "private" + sp + cls_name,
    "public_member": "class" + sp + cls_name + sp + sp_line + left_curbra + sp + sp_line + sp + "public:" + sp + sp_line + sp + var_declar + title_def,
    "private_member": "class" + sp + cls_name + sp + sp_line + left_curbra + sp + sp_line + sp + "private:" + sp + sp_line + sp + var_declar + title_def,
    "protected_member": "class" + sp + cls_name + sp + sp_line + left_curbra + sp + sp_line + sp + "protected:" + sp + sp_line + sp + var_declar + title_def,
    "intro1": "//",
    "intro2": "/\*\S*\*/",
    "struct_def" : "struct",
    "class_def": "class",
    "include_def":  "#include",
    "inline_def": "inline",
    "iostream_def"    : "iostream",
    "iomanip_def"    : "iomanip",
    "namespace_def"    : "namespace",
    "char_def"    : "char",
    # "string_def"    : "string",
    "friend_def"    : "friend",
    "this_def"    : "this->",
    "operator_def"    : "operator",
    "bool_def"    : "bool",
    "int_def"    : "int",
    "float_def"    : "float",
    "double_def"    : "double",
    "void_def"    : "void",
    "wchar_t_def"    : "wchar_t",
    "virtual_def"    : "virtual",
    "true_def"    : "true",
    "false_def"    : "false",
    "const_def"    : "const",
    "#define_def"    : "#define",
    "signed_def"    : "signed",
    "unsigned_def"    : "unsigned",
    "long_def"    : "long",
    "short_def"    : "short",
    "sizeof_def"    : "sizeof",
    "auto_def"    : "auto",
    "register_def"    : "register",
    "static_def"    : "static",
    "extem_def"    : "extem",
    "mutable_def"    : "mutable",
    "thread_local_def"    : "thread_local",
    "while_def"    : "while",
    "for_def"    : "for",
    "break_def"    : "break",
    "continue_def"    : "continue",
    "goto_def"    : "goto",
    "if_def"    : "if",
    "switch_def"    : "switch",
    "main_def"    : "main",
    "srand_def"    : "srand",
    "rand_def"    : "rand",
    "strcpy_def"    : "strcpy",
    "strcat_def"    : "strcat",
    "strlen_def"    : "strlen",
    "strcmp_def"    : "strcmp",
    "strchr_def"    : "strchr",
    "strstr_def"    : "strstr",
    "fstream_def"    : "fstream",
    "cin_def"    : "cin",
    "cout_def"    : "cout",
    "cerr_def"    : "cerr",
    "clog_def"    : "clog",
    "setw_def"    : "setw",
    "setprecision_def"    : "setprecision",
    "using_def"    : "using",
    "printf_def"    : "printf",
    "scanf_def"    : "scanf",
    "enum_def"    : "enum",
    "alarm_def" : "\\a",
    "back_sp_def": "\x08",
    "page_break_def": "\\f",
    "line_break_def": "\\n",
    "enter_def": "\\r",
    "tab_def": "\\t",
    "vertical_def": "\\v",
    "plus_def": "\+",
    "sub_def": "-",
    "times_def": "\*",
    "div_def": "/",
    "residual_def": "%",
    "increase_def": "\+\+",
    "decrease_def": "--",
    "equal_def": "==",
    "nonequal_def": "!=",
    "lt_def": "<",
    "gt_def": ">",
    "ngt_def": "<=",
    "nlt_def": ">=",
    "logi_and_def": "&&",
    "logi_or_def": "\|\|",
    "no_def": "!",
    "and_def": "&",
    "or_def": "\|",
    "xor_def": "\^",
    "complement_def": "~",
    "left_move_def": "<<",
    "right_move_def": ">>",
    "assign_value_def": "=",
    "plus_assign_def": "\+=",
    "sub_assign_def": "-=",
    "times_assign_def": "\*=",
    "div_assign_def": "/=",
    "residual_assign_def": "%=",
    "left_move_assign_def": "<<=",
    "right_move_assign_def": ">>=",
    "and_assign_def": "&=",
    "or_assign_def": "\|=",
    "xor_assign_def": "\^="
}


def get_all_patterns(rules_dict = pattern_dict):
    compile_res = collections.OrderedDict()
    for key, value in pattern_dict.items():
        compile_res[key] = re.compile(value)
    return compile_res